generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  password      String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  talkPages     TalkPage[]
  landingPages  LandingPage[]
}

model TalkPage {
  id                String    @id @default(cuid())
  slug              String    @unique
  title             String
  date              DateTime
  published         Boolean   @default(false)
  
  // Speaker Info
  speakerName       String
  speakerEmail      String
  speakerPhoto      String?
  speakerBio        String?
  speakerLinkedIn   String?
  
  // Content
  hook              String?
  keynoteNotesUrl   String?
  keynoteSlidesUrl  String?
  
  // Contact
  contactEmail      String?
  calendarLink      String?
  
  // Newsletter
  newsletterEnabled     Boolean @default(false)
  newsletterDescription String?
  newsletterSignupUrl   String?
  newsletterBannerUrl   String?
  
  // Metadata
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  userId            String
  user              User      @relation(fields: [userId], references: [id])
  
  // Relations
  customGpts        CustomGPT[]
  downloads         Download[]
  businessLinks     BusinessLink[]
  emailCaptures     EmailCapture[]
  analytics         Analytics[]
  landingPage       LandingPage?
}

model CustomGPT {
  id          String    @id @default(cuid())
  name        String
  description String
  url         String
  clickCount  Int       @default(0)
  order       Int       @default(0)
  
  talkPageId  String
  talkPage    TalkPage  @relation(fields: [talkPageId], references: [id], onDelete: Cascade)
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Download {
  id            String    @id @default(cuid())
  title         String
  description   String?
  fileUrl       String
  requiresEmail Boolean   @default(false)
  downloadCount Int       @default(0)
  order         Int       @default(0)
  
  talkPageId    String
  talkPage      TalkPage  @relation(fields: [talkPageId], references: [id], onDelete: Cascade)
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model BusinessLink {
  id          String    @id @default(cuid())
  name        String
  description String
  url         String
  ctaText     String
  clickCount  Int       @default(0)
  order       Int       @default(0)
  
  talkPageId  String
  talkPage    TalkPage  @relation(fields: [talkPageId], references: [id], onDelete: Cascade)
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model EmailCapture {
  id          String    @id @default(cuid())
  email       String
  name        String?
  tier        String    // "resources", "newsletter", "consultation"
  
  talkPageId  String
  talkPage    TalkPage  @relation(fields: [talkPageId], references: [id], onDelete: Cascade)
  
  createdAt   DateTime  @default(now())
  
  @@unique([email, talkPageId])
}

model Analytics {
  id          String    @id @default(cuid())
  event       String    // "page_view", "gpt_click", "download", "email_signup"
  data        Json?     // Additional event data
  
  talkPageId  String
  talkPage    TalkPage  @relation(fields: [talkPageId], references: [id], onDelete: Cascade)
  
  createdAt   DateTime  @default(now())
}

// Privacy Compliance Models

model ConsentRecord {
  id          String    @id @default(cuid())
  userId      String?   // Optional - for logged-in users
  email       String?   // Optional - for guest users
  ipAddress   String
  userAgent   String
  preferences Json      // ConsentPreferences object
  timestamp   DateTime
  version     String    // Privacy policy version
  source      String    // "banner", "settings", "signup", "api"
  
  createdAt   DateTime  @default(now())
  
  @@index([userId])
  @@index([email])
  @@index([timestamp])
}

model EmailCaptureConsent {
  id               String    @id @default(cuid())
  email            String
  name             String?
  marketingConsent Boolean
  analyticsConsent Boolean
  source           String    // Source of the capture
  ipAddress        String
  timestamp        DateTime
  
  createdAt        DateTime  @default(now())
  
  @@index([email])
  @@index([timestamp])
}

model CcpaOptOut {
  id          String    @id @default(cuid())
  ipAddress   String
  doNotSell   Boolean
  timestamp   DateTime
  userAgent   String
  
  createdAt   DateTime  @default(now())
  
  @@index([ipAddress])
  @@index([timestamp])
}

model DataDeletionLog {
  id           String    @id @default(cuid())
  email        String
  userId       String?
  deletionDate DateTime
  deletionType String    // "user_request", "automated", "legal"
  ipAddress    String
  userAgent    String
  
  createdAt    DateTime  @default(now())
  
  @@index([email])
  @@index([deletionDate])
}

// Landing Page Models

model LandingPage {
  id               String    @id @default(cuid())
  slug             String    @unique
  title            String
  description      String?
  type             String    @default("general") // "general", "talk", "product", "event"
  published        Boolean   @default(false)
  
  // SEO
  metaTitle        String?
  metaDescription  String?
  metaKeywords     String?
  ogImage          String?
  
  // Content Sections
  sections         LandingPageSection[]
  
  // GPT Links
  customGpts       LandingPageGPT[]
  
  // Talk-specific fields (optional)
  talkPageId       String?   @unique
  talkPage         TalkPage? @relation(fields: [talkPageId], references: [id], onDelete: SetNull)
  
  // Analytics
  viewCount        Int       @default(0)
  conversionCount  Int       @default(0)
  
  // Ownership
  userId           String
  user             User      @relation(fields: [userId], references: [id])
  
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  
  @@index([slug])
  @@index([type])
  @@index([published])
}

model LandingPageSection {
  id               String    @id @default(cuid())
  landingPageId    String
  landingPage      LandingPage @relation(fields: [landingPageId], references: [id], onDelete: Cascade)
  
  type             String    // "hero", "features", "cta", "testimonials", "faq", "custom"
  order            Int       @default(0)
  
  // Content
  title            String?
  subtitle         String?
  content          Json?     // Flexible JSON for different section types
  
  // Media
  backgroundImage  String?
  backgroundColor  String?
  videoUrl         String?
  
  // Settings
  visible          Boolean   @default(true)
  customCss        String?
  customHtml       String?
  
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  
  @@index([landingPageId])
  @@index([order])
}

model LandingPageTemplate {
  id               String    @id @default(cuid())
  name             String
  description      String?
  type             String    // "general", "talk", "product", "event"
  thumbnail        String?
  
  // Template content
  sections         Json      // Pre-defined sections structure
  defaultSettings  Json?     // Default colors, fonts, etc.
  
  // Usage tracking
  usageCount       Int       @default(0)
  
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  
  @@index([type])
}

model LandingPageGPT {
  id               String    @id @default(cuid())
  name             String
  description      String
  url              String
  clickCount       Int       @default(0)
  order            Int       @default(0)
  
  landingPageId    String
  landingPage      LandingPage @relation(fields: [landingPageId], references: [id], onDelete: Cascade)
  
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  
  @@index([landingPageId])
}