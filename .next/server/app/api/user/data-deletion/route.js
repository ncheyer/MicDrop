"use strict";(()=>{var e={};e.id=275,e.ids=[275],e.modules={3524:e=>{e.exports=require("@prisma/client")},399:e=>{e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},517:e=>{e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},7118:(e,a,t)=>{t.r(a),t.d(a,{originalPathname:()=>h,patchFetch:()=>g,requestAsyncStorage:()=>p,routeModule:()=>c,serverHooks:()=>m,staticGenerationAsyncStorage:()=>w});var r={};t.r(r),t.d(r,{GET:()=>u,POST:()=>d});var n=t(9303),i=t(8716),s=t(670),o=t(7070),l=t(2331);async function d(e){try{let{email:a,userId:t,confirmationToken:r}=await e.json();if(!a&&!t)return o.NextResponse.json({error:"Email or User ID required for data deletion"},{status:400});return await l._.$transaction(async r=>{let n=null;if(t?n=await r.user.findUnique({where:{id:t},include:{talkPages:{include:{analytics:!0,emailCaptures:!0}}}}):a&&(n=await r.user.findUnique({where:{email:a},include:{talkPages:{include:{analytics:!0,emailCaptures:!0}}}})),n){for(let e of n.talkPages)await r.analytics.deleteMany({where:{talkPageId:e.id}}),await r.emailCapture.deleteMany({where:{talkPageId:e.id}}),await r.customGPT.deleteMany({where:{talkPageId:e.id}}),await r.download.deleteMany({where:{talkPageId:e.id}}),await r.businessLink.deleteMany({where:{talkPageId:e.id}}),await r.talkPage.delete({where:{id:e.id}});await r.user.delete({where:{id:n.id}})}let i=a||n?.email;i&&(await r.emailCapture.deleteMany({where:{email:i}}),await r.emailCaptureConsent.deleteMany({where:{email:i}}),await r.consentRecord.deleteMany({where:{email:i}})),await r.dataDeletionLog.create({data:{email:i||"",userId:t||"",deletionDate:new Date,deletionType:"user_request",ipAddress:e.headers.get("x-forwarded-for")?.split(",")[0]||e.headers.get("x-real-ip")||"unknown",userAgent:e.headers.get("user-agent")||"unknown"}})}),o.NextResponse.json({success:!0,message:"All personal data has been permanently deleted from our systems."})}catch(e){return console.error("Error deleting user data:",e),o.NextResponse.json({error:"Failed to delete user data"},{status:500})}}async function u(e){try{let{searchParams:a}=new URL(e.url),t=a.get("email"),r=a.get("userId");if(!t&&!r)return o.NextResponse.json({error:"Email or User ID required"},{status:400});let n={user:!1,emailCaptures:0,consentRecords:0,talkPages:0};if(r){let e=await l._.user.findUnique({where:{id:r},include:{talkPages:!0}});e&&(n.user=!0,n.talkPages=e.talkPages.length)}if(t){let e=await l._.emailCapture.count({where:{email:t}}),a=await l._.consentRecord.count({where:{email:t}});n.emailCaptures=e,n.consentRecords=a}return o.NextResponse.json({dataExists:n,deletionInfo:{whatWillBeDeleted:["User account and profile information","All talk pages and associated content","Email capture records and newsletter signups","Analytics and usage data","Privacy consent records","Any uploaded files and resources"],whatWillBeRetained:["Anonymized analytics for platform improvement","Legal compliance records (without personal identifiers)","Financial records as required by law"],timeframe:"Deletion occurs immediately and cannot be undone"}})}catch(e){return console.error("Error checking deletion data:",e),o.NextResponse.json({error:"Failed to check user data"},{status:500})}}let c=new n.AppRouteRouteModule({definition:{kind:i.x.APP_ROUTE,page:"/api/user/data-deletion/route",pathname:"/api/user/data-deletion",filename:"route",bundlePath:"app/api/user/data-deletion/route"},resolvedPagePath:"/Users/noahcheyer/MicDrop/app/api/user/data-deletion/route.ts",nextConfigOutput:"",userland:r}),{requestAsyncStorage:p,staticGenerationAsyncStorage:w,serverHooks:m}=c,h="/api/user/data-deletion/route";function g(){return(0,s.patchFetch)({serverHooks:m,staticGenerationAsyncStorage:w})}},2331:(e,a,t)=>{t.d(a,{_:()=>n});var r=t(3524);let n=globalThis.prisma||new r.PrismaClient}};var a=require("../../../../webpack-runtime.js");a.C(e);var t=e=>a(a.s=e),r=a.X(0,[948,972],()=>t(7118));module.exports=r})();